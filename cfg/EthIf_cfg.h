#ifndef NAMMA_AUTOSAR_ETHIF_CFG_H
#define NAMMA_AUTOSAR_ETHIF_CFG_H

// This file is autogenerated, any hand modifications will be lost!

#include <Platform_Types.h>



typedef struct {
        uint8   max_trcvs;
        boolean dev_error_detect;
        boolean en_rx_int;
        boolean en_tx_int;
        boolean version_info_api;
        boolean version_info_api_macro;
        uint8 lnk_st_ch_mn_reload;
        uint16  mn_fn_period_ms;
        uint16  rx_ind_itrtn;
        boolean get_rst_meas_data_api;
        boolean start_auto_neg;
        boolean get_baud_rate;
        boolean counter_state;
        boolean gl_time_supp;
        boolean wake_supp;
        boolean trcv_wakemode_api;
        uint16  swt_off_port_delay_ms;
        uint16  port_startup_activ_ms;
        uint16  mn_fn_state_period_ms;
        boolean set_fwd_mode_api;
        boolean verify_cfg_api;
        boolean swt_mgmt_supp;
        boolean get_ctrl_idx_lst;
        boolean get_vlan_id_supp;
        boolean en_weth_api;
        boolean en_sig_qual_api;
        uint16  sig_qual_chk_ms;
        boolean en_sec_evt_report;
        void *sec_evt_ref;
} EthIfGeneralCfgType;



typedef struct {
        uint16 frametype;
        uint8 if_owner;
} EthIf_FrameOwnerConfigType;



typedef struct {
        void *fifo_ref;
        void *ecc_ref;
        void *wecc_ref;
        uint16 mn_fn_ms;
        uint16 rx_ind_iter;
        uint8 idx;
} EthIf_PhysControllerConfigType;



typedef struct {
        void *swt_ref;
        uint8 idx;
} EthIf_SwitchConfigType;



typedef enum {
	ETHIF_SWITCH_PORT_GROUP_LINK_INFO,
	ETHIF_SWITCH_PORT_GROUP_SEMANTICS_MAX
} EthIf_PortGrpRefSemantics_Type;



typedef struct {
        void *port_ref;
        EthIf_PortGrpRefSemantics_Type port_grp_ref_sem;
        uint8 idx;
} EthIf_SwitchPortGroupConfigType;



typedef struct {
        void *eth_trcv_ref;
        void *weth_trcv_ref;
        uint8 idx;
} EthIf_TransceiverConfigType;



typedef struct {
        EthIf_PhysControllerConfigType *pctrlr_ref;
        EthIf_TransceiverConfigType *trcv_ref;
        EthIf_SwitchConfigType *swt_ref;
        EthIf_SwitchPortGroupConfigType *swt_pg_ref;
        uint32 max_tx_bufs;
        uint16 mtu;
        uint16 vlan_id;
        uint8 idx;
} EthIf_ControllerConfigType;



#define ETHIF_MAX_FRAMEOWNER_CONFIGS   (2)
#define ETHIF_MAX_RX_INDCATN_CONFIGS   (2)
#define ETHIF_MAX_TX_CONFIRM_CONFIGS   (2)
#define ETHIF_MAX_LNK_ST_CHG_CONFIGS   (2)
#define ETHIF_MAX_PHYS_CTRLR_CONFIGS   (2)
#define ETHIF_MAX_ETH_SWITCH_CONFIGS   (1)
#define ETHIF_MAX_SWT_PORT_G_CONFIGS   (1)
#define ETHIF_MAX_TRANSCEIVR_CONFIGS   (1)
#define ETHIF_MAX_CONTROLLER_CONFIGS   (1)


typedef void (*ethif_fp_type)(void);

typedef struct {
        const EthIfGeneralCfgType general;
        const EthIf_FrameOwnerConfigType *fo_cfg;
        const ethif_fp_type *rxi_cfg;
        const ethif_fp_type *txc_cfg;
        const ethif_fp_type *lsc_cfg;
        const EthIf_PhysControllerConfigType *pctrlr_cfg;
        const EthIf_SwitchConfigType *swt_cfg;
        const EthIf_SwitchPortGroupConfigType *spg_cfg;
        const EthIf_TransceiverConfigType *trcv_cfg;
        const EthIf_ControllerConfigType *ctrlr_cfg;
} EthIf_ConfigType;



extern const EthIf_ConfigType EthIfConfigs;


#endif
